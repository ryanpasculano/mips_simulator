#!/usr/bin/python


import sys, os, subprocess, re, glob, argparse

ref = "./baseline"
sim = "./simulator"

bold="\033[1m"
green="\033[0;32m"
red="\033[0;31m"
normal="\033[0m"

def main():
    all_inputs = glob.glob("inputs/*/*.x")

    parser = argparse.ArgumentParser()
    parser.add_argument("config", default="config.json", help="Address of config file")
    parser.add_argument("inputs", nargs="*", default=all_inputs)
    parser = parser.parse_args()
    print(parser.inputs)

    for i in parser.inputs:
        if not os.path.exists(i):
            print red + "ERROR -- input file (*.x) not found: " + i + normal
            continue

        print bold + "Testing: " + normal + i
        ref_out, sim_out = run(parser.config, i)

        print "  " + "Stats".ljust(16) + "BaselineSim".center(16) + "YourSim".center(16)

        ref_out = ref_out.split("\n")
        sim_out = sim_out.split("\n")
#	print ref_out
#	print sim_out
	nocheck = 0
	error = 0
        for r, s in zip(ref_out, sim_out):
            r0 = r.split()[0]
            r1 = r.split()[1]
            s1 = s.split()[1]
#            print (r1, s1)

	    if (r0[0:3] != "MEM"):
	            print "  " + r0.ljust(16) + r1.center(16) + s1.center(16),

            if (r0 == "Cycles:"):
            	nocheck = 1
	    if (r0[0:3] == "MEM"):
	    	nocheck = 0
            if (r1 != s1 and nocheck == 0):
		print "  " + red + "ERROR" + normal
		error = 1
	    elif (r0[0:3] != "MEM"):
	        print

        if error == 0:
	    print "  " + green + "REGISTER AND MEMORY CONTENTS OK" + normal
	else:
	    break
	print


def run(config, i):
    global ref, sim

    refproc = subprocess.Popen([ref, config, i], executable=ref, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    simproc = subprocess.Popen([sim, config, i], executable=sim, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    cmds = ""
    cmdfile = os.path.splitext(i)[0] + ".cmd"
    memfile = os.path.splitext(i)[0] + ".mem"
    if os.path.exists(cmdfile):
      cmds += open(cmdfile).read()

    cmds += "\ngo\nrdump\n"
    if os.path.exists(memfile):
      cmds += open(memfile).read()
    cmds += "quit\n"
    (r, r_err) = refproc.communicate(input=cmds)
    (s, s_err) = simproc.communicate(input=cmds)
    
    return filter_stats(r), filter_stats(s)


def filter_stats(out):
    lines = out.split("\n")
    regex = re.compile("^(HI:)|(LO:)|(R\d+:)|(PC:)|(Cycles:)|(Fetched\w+:)|(Retired\w+:)|(IPC:)|(MEM\[)|(Flushes:).*$")
    out = []
    for l in lines:
        if regex.match(l):
          out.append(l)

    return "\n".join(out)


if __name__ == "__main__":
    main()

